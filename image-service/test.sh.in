#!/bin/bash -ex
RUN_FIT_TEST="${RUN_FIT_TEST}"
MODIFY_API_PACKAGE="${MODIFY_API_PACKAGE}"

cleanUpDockerImages(){
    echo $SUDO_PASSWORD |sudo -S docker rmi $(echo $SUDO_PASSWORD |sudo -S docker images -q)
}

cleanUpDockerContainer(){
    echo $SUDO_PASSWORD |sudo -S docker rm $(echo $SUDO_PASSWORD |sudo -S docker ps -a -q)
}

cleanUp(){
    set +e
    cleanUpDockerContainer
    cleanUpDockerImages
    set -e
}


TEST_GROUP="imageservice"

generateSolLogStop(){
  set +e
  pkill -f SCREEN
}

generateSysLog(){
  set +e
  containerId=$( echo $SUDO_PASSWORD |sudo -S docker ps|grep "my/test" | awk '{print $1}' )
  echo $SUDO_PASSWORD |sudo -S docker exec -it $containerId dmesg > ${WORKSPACE}/build-log/dmesg.log
}

setupVirtualEnv(){
  pushd ${WORKSPACE}/RackHD/test
  rm -rf .venv/on-build-config
  ./mkenv.sh on-build-config
  source myenv_on-build-config
  popd
}

BASE_REPO_URL="${BASE_REPO_URL}"
runTests() {
  set +e
  netstat -ntlp
  args=()
  if [ ! -z "$1" ];then
      args+="$1"
  fi
  if [ "$RUN_FIT_TEST" == true ] ; then
      fitImageServiceTest "${args}"
  fi
  set -e
}


dockerUp(){
    pushd $WORKSPACE
    echo $SUDO_PASSWORD |sudo -S docker load -i rackhd_pipeline_docker.tar
    popd
    cp -r ${WORKSPACE}/build-deps ${WORKSPACE}/build-config/jobs/pr_gate/docker
    pushd ${WORKSPACE}/build-config/jobs/pr_gate/docker
    #cp -r ${WORKSPACE}/build-config/jobs/pr_gate/docker/* .
    echo $SUDO_PASSWORD |sudo -S docker build -t my/test .
    echo $SUDO_PASSWORD |sudo -S docker run --net=host -v /etc/localtime:/etc/localtime:ro -d -t my/test
    popd
}

setupTestsConfig(){
    RACKHD_DHCP_HOST_IP=$(ifconfig | awk '/inet addr/{print substr($2,6)}' |grep 172.31.128)
    if [ -n "$RACKHD_CONFIG_FILE_URL" ]; then
      wget --tries=3 $RACKHD_CONFIG_FILE_URL -O ${WORKSPACE}/build-config/jobs/pr_gate/docker/monorail/config.json
    fi
    sed -i "s/172.31.128.1/${RACKHD_DHCP_HOST_IP}/g" ${WORKSPACE}/build-config/jobs/pr_gate/docker/monorail/config.json
    if [ "$RUN_FIT_TEST" == true ] ; then
        pushd ${WORKSPACE}/RackHD/test/config
        sed -i "s/\"username\": \"vagrant\"/\"username\": \"${SUDO_USER}\"/g" credentials_default.json
        sed -i "s/\"password\": \"vagrant\"/\"password\": \"$SUDO_PASSWORD\"/g" credentials_default.json
        popd
        pushd ${WORKSPACE}/RackHD
        find ./ -type f -exec sed -i -e "s/172.31.128.1/${RACKHD_DHCP_HOST_IP}/g" {} \;
        popd
    fi
}

collectTestReport()
{
    pushd ${WORKSPACE}/RackHD/test
    mkdir -p ${WORKSPACE}/xunit-reports
    cp *.xml ${WORKSPACE}/xunit-reports
    popd
}

fitImageServiceTest()
{
    echo "########### Run FIT Smoke Test #############"
    python run_tests.py ${TEST_GROUP} ${tstack} ${args} -extra imageservice_config.json -v 4 -xunit
    #python run_tests.py -test tests -group imageservice -stack vagrant -extra imageservice_config.json -port 9090 -v 9 -xunit
    if [ $? -ne 0 ]; then
        echo "Test FIT failed running image service test"
        collectTestReport
        exit 1
    fi
    collectTestReport
    popd
    set -e
}

exportLog(){
    set +e
    generateSolLogStop
    echo $SUDO_PASSWORD| sudo -S chown -R $USER:$USER ${WORKSPACE}
    set -e
}

cleanUp
# register the signal handler to export log
trap exportLog SIGINT SIGTERM SIGKILL EXIT
setupTestsConfig
dockerUp
# Setup the virtual-environment
setupVirtualEnv
generateSolLog
# Run tests
runTests " --sm-amqp-use-user guest"
